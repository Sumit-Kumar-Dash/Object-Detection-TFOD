conda create -n tfod python==3.6.10 -y
conda activate tfod
pip install pillow lxml Cython contextlib2 jupyter matplotlib pandas opencv-python tensorflow==1.14.0

#from research folder
cd models-r1.13.0/research
python setup.py install   #install object detection

#protobuf
cd object_detection/protos
#this folder will contain .proto file
cd ../../

#convert files from protos to python
conda install -c anaconda protobuf

protoc object_detection/protos/*.proto --python_out=.
cd object_detection/protos
#check .py file should be generated

cd ..
jupyter notebook object_detection_tutorial.ipynb


#Code for prediction , paste it at end of notebook
import cv2

cap = cv2.VideoCapture(0)
with detection_graph.as_default():
	with tf.Session(graph=detection_graph) as sess:
		while True:
			ret,image_np = cap.read()
			#expand dimension since the model expects images to have shape: [1,None,None,3]
			image_np_expanded = np.expand_dims(image_np,axis=0)
			image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')
			#each box represent a part of the image where a particular object was detected
			boxes = detection_graph.get_tensor_by_name('detection_boxes:0')
			#each score represent how level of confidence for each of the objects
			#score is shown on the result image, together with the class lebel
			scores = detection_graph.get_tensor_by_name('detection_scores:0')
			classes = detection_graph.get_tensor_by_name('detection_classes:0')
			num_detection = detection_graph.get_tensor_by_name('num_detections:0')
			#Actual detection

			(boxes,scores,classes,num_detections) = sess.run([boxes,scores,classes,num_detection],feed_dict = {image_tensor:image_np_expanded})
			#visualization
			vis_util.visualize_boxes_and_labels_on_image_array(image_np,np.squeeze(boxes),np.squeeze(classes).astype(np.int32),np.squeeze(scores),category_index,use_normalized_coordinate=True,line_thickness=8)

			cv2.imshow('object_detection',cv2.resize(image_np,(800,600)))
			if cv2.waitKey(25) & 0xFF == ord('q'):
				cv2.destroyAllWindows()
				break
cap.release()

